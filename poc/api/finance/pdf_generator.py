# api/utils/pdf_generator.py
from reportlab.lib.pagesizes import letter, A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, PageBreak, Image
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch, mm
from reportlab.lib import colors
from reportlab.lib.colors import HexColor
from reportlab.platypus.tableofcontents import TableOfContents
from reportlab.graphics.shapes import Drawing, Rect
from reportlab.platypus.flowables import Flowable
from datetime import datetime
import io
from typing import Dict, Any

# SisoNova Brand Colors
# SisoNova African-Inspired Brand Colors
AFRICAN_SUNSET = HexColor('#D2691E')      # Burnt orange/terracotta
AFRICAN_EARTH = HexColor('#8B4513')       # Rich brown/earth
AFRICAN_GOLD = HexColor('#DAA520')        # Golden yellow
AFRICAN_SAGE = HexColor('#9CAF88')        # Sage green
AFRICAN_CLAY = HexColor('#CD853F')        # Clay/sand
AFRICAN_DEEP_EARTH = HexColor('#654321')  # Deep brown
AFRICAN_CREAM = HexColor('#FFF8DC')       # Warm cream
AFRICAN_RUST = HexColor('#B7410E')        # Rust red
AFRICAN_LIGHT_SAGE = HexColor('#E8F5E8')  # Light sage
AFRICAN_LIGHT_GOLD = HexColor('#FFF8DC')  # Light gold

class SisoNovaHeaderFooter(Flowable):
    """Custom header/footer for SisoNova branding"""
    
    def __init__(self, width, height, is_header=True, report_type="Financial Report"):
        Flowable.__init__(self)
        self.width = width
        self.height = height
        self.is_header = is_header
        self.report_type = report_type
    
    def draw(self):
        if self.is_header:
            # Header with SisoNova branding
            self.canv.setFillColor(SISONOVA_BLUE)
            self.canv.rect(0, 0, self.width, self.height, fill=1, stroke=0)
            
            # SisoNova logo text (you can replace with actual logo image)
            self.canv.setFillColor(colors.white)
            self.canv.setFont("Helvetica-Bold", 16)
            self.canv.drawString(20, self.height/2 - 5, "SisoNova")
            
            # Report type
            self.canv.setFont("Helvetica", 10)
            self.canv.drawRightString(self.width - 20, self.height/2 - 5, self.report_type)
        else:
            # Footer
            self.canv.setFillColor(SISONOVA_GRAY)
            self.canv.setFont("Helvetica", 8)
            self.canv.drawString(20, self.height/2, f"Generated by SisoNova • {datetime.now().strftime('%Y-%m-%d %H:%M')}")
            self.canv.drawRightString(self.width - 20, self.height/2, f"Page {self.canv.getPageNumber()}")

class FinancialReportPDF:
    """Generate PDF financial reports for WhatsApp delivery"""

    def __init__(self):
        self.styles = getSampleStyleSheet()
        self._setup_african_styles()
    
    def _setup_african_styles(self):
        """Setup African-inspired branded styles"""
        
        # Main title style
        self.title_style = ParagraphStyle(
            'AfricanTitle',
            parent=self.styles['Heading1'],
            fontSize=26,
            spaceAfter=30,
            spaceBefore=20,
            textColor=AFRICAN_EARTH,
            fontName='Helvetica-Bold',
            alignment=1  # Center alignment
        )
        
        # Section heading style
        self.heading_style = ParagraphStyle(
            'AfricanHeading',
            parent=self.styles['Heading2'],
            fontSize=16,
            spaceAfter=15,
            spaceBefore=25,
            textColor=AFRICAN_SUNSET,
            fontName='Helvetica-Bold',
            borderWidth=2,
            borderColor=AFRICAN_GOLD,
            borderPadding=8,
            backColor=AFRICAN_LIGHT_GOLD
        )
        
        # Subheading style
        self.subheading_style = ParagraphStyle(
            'AfricanSubHeading',
            parent=self.styles['Heading3'],
            fontSize=13,
            spaceAfter=12,
            spaceBefore=15,
            textColor=AFRICAN_RUST,
            fontName='Helvetica-Bold'
        )
        
        # Body text style
        self.body_style = ParagraphStyle(
            'AfricanBody',
            parent=self.styles['Normal'],
            fontSize=11,
            spaceAfter=8,
            textColor=AFRICAN_DEEP_EARTH,
            fontName='Helvetica',
            leading=14
        )
        
        # Description style for section intros
        self.description_style = ParagraphStyle(
            'AfricanDescription',
            parent=self.styles['Normal'],
            fontSize=12,
            spaceAfter=20,
            spaceBefore=10,
            textColor=AFRICAN_EARTH,
            fontName='Helvetica',
            leading=16,
            leftIndent=10,
            rightIndent=10
        )
        
        # Highlight style for important numbers
        self.highlight_style = ParagraphStyle(
            'AfricanHighlight',
            parent=self.styles['Normal'],
            fontSize=13,
            spaceAfter=10,
            textColor=AFRICAN_SUNSET,
            fontName='Helvetica-Bold',
            backColor=AFRICAN_LIGHT_GOLD,
            borderWidth=1,
            borderColor=AFRICAN_GOLD,
            borderPadding=8
        )
        
        # Warning style for concerns
        self.warning_style = ParagraphStyle(
            'AfricanWarning',
            parent=self.styles['Normal'],
            fontSize=11,
            spaceAfter=8,
            textColor=AFRICAN_RUST,
            fontName='Helvetica-Bold'
        )
    
    def generate_financial_report_pdf(self, report_data: Dict[str, Any], user_phone: str) -> bytes:
        """Generate PDF from comprehensive financial report data"""
        
        buffer = io.BytesIO()
        doc = SimpleDocTemplate(buffer, pagesize=A4, rightMargin=72, leftMargin=72,
                              topMargin=72, bottomMargin=18)
        
        # Build the PDF content
        story = []
        
        # Title
        title = Paragraph("Your Financial Report", self.title_style)
        story.append(title)
        story.append(Spacer(1, 12))
        
        # Period
        period_text = f"Report Period: {report_data['period']}"
        story.append(Paragraph(period_text, self.styles['Normal']))
        story.append(Spacer(1, 20))
        
        # Summary Section
        story.append(Paragraph("Financial Summary", self.heading_style))
        summary = report_data['summary']
        summary_data = [
            ['Total Income:', f"R {summary['total_income']:,.2f}"],
            ['Total Expenses:', f"R {summary['total_expenses']:,.2f}"],
            ['Net Position:', f"R {summary['net_position']:,.2f}"],
            ['Savings Rate:', f"{summary['savings_rate']}%"],
            ['Daily Spending:', f"R {summary['average_daily_spending']:,.2f}"],
            ['Status:', summary['financial_status']]
        ]
        
        summary_table = Table(summary_data, colWidths=[2*inch, 2*inch])
        summary_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.lightgrey),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 10),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))
        
        story.append(summary_table)
        story.append(Spacer(1, 20))
        
        # Category Breakdown
        story.append(Paragraph("Spending by Category", self.heading_style))
        categories = report_data['category_breakdown']['by_category']
        category_data = [['Category', 'Amount', 'Count']]
        for category, data in categories.items():
            category_data.append([category, f"R {data['total']:,.2f}", str(data['count'])])
        
        category_table = Table(category_data, colWidths=[2*inch, 1.5*inch, 1*inch])
        category_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.darkgreen),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 10),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.lightgreen),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))
        
        story.append(category_table)
        story.append(Spacer(1, 20))
        
        # Financial Health
        story.append(Paragraph("Financial Health Assessment", self.heading_style))
        health = report_data['financial_health']
        health_score = health['health_score']
        
        health_text = f"Health Score: {health_score['score']}/100 ({health_score['status']})"
        story.append(Paragraph(health_text, self.styles['Normal']))
        
        if health['stress_indicators']:
            story.append(Paragraph("Areas of Concern:", self.styles['Normal']))
            for indicator in health['stress_indicators']:
                story.append(Paragraph(f"• {indicator}", self.styles['Normal']))
        
        story.append(Spacer(1, 20))
        
        # Actionable Insights
        story.append(Paragraph("Recommendations", self.heading_style))
        insights = report_data['actionable_insights']
        for insight in insights:
            story.append(Paragraph(f"• {insight}", self.styles['Normal']))
        
        story.append(Spacer(1, 20))
        
        # Emergency Preparedness
        emergency = report_data['emergency_preparedness']
        story.append(Paragraph("Emergency Fund Status", self.heading_style))
        emergency_text = f"You can cover {emergency['months_covered']} months of expenses. {emergency['recommendation']}"
        story.append(Paragraph(emergency_text, self.styles['Normal']))
        
        # Footer
        story.append(Spacer(1, 30))
        footer_text = f"Report generated on {datetime.now().strftime('%Y-%m-%d %H:%M')} for {user_phone}"
        story.append(Paragraph(footer_text, self.styles['Normal']))
        
        # Build PDF
        doc.build(story)
        buffer.seek(0)
        return buffer.getvalue()
    
    def generate_category_report_pdf(self, report_data: Dict[str, Any], report_type: str, user_phone: str) -> bytes:
        """Generate African-styled PDF for category-specific reports"""
        
        buffer = io.BytesIO()
        doc = SimpleDocTemplate(
            buffer, 
            pagesize=A4, 
            rightMargin=25*mm, 
            leftMargin=25*mm,
            topMargin=35*mm, 
            bottomMargin=25*mm
        )
        
        story = []
        
        # Add header space
        story.append(Spacer(1, 10*mm))
        
        # Determine report title and build content
        if report_type == "expenses":
            title = "Expense Analysis Report"
            story.extend(self._build_expense_pdf_content(report_data))
        elif report_type == "incomes":
            title = "Income Analysis Report"
            story.extend(self._build_income_pdf_content(report_data))
        elif report_type == "feelings":
            title = "Financial Wellness Report"
            story.extend(self._build_feelings_pdf_content(report_data))
        else:
            title = "Financial Report"
            story.extend(self._build_comprehensive_pdf_content(report_data))
        
        # Add title at the beginning
        title_paragraph = Paragraph(title, self.title_style)
        story.insert(0, title_paragraph)
        story.insert(1, Spacer(1, 15))
        
        # Add period if available
        if 'period' in report_data:
            period_text = f"<b>Report Period:</b> {report_data['period']}"
            story.insert(2, Paragraph(period_text, self.body_style))
            story.insert(3, Spacer(1, 20))
        
        # Build PDF with custom page template
        doc.build(story, onFirstPage=self._add_page_elements, onLaterPages=self._add_page_elements)
        buffer.seek(0)
        return buffer.getvalue()
    
    def _add_page_elements(self, canvas, doc):
        """Add African-themed header and footer to each page"""
        canvas.saveState()
        
        # Header with gradient effect (simulated with rectangles)
        header_height = 18*mm
        
        # Main header background
        canvas.setFillColor(AFRICAN_SUNSET)
        canvas.rect(0, A4[1] - header_height, A4[0], header_height, fill=1, stroke=0)
        
        # Accent stripe
        canvas.setFillColor(AFRICAN_GOLD)
        canvas.rect(0, A4[1] - 3*mm, A4[0], 3*mm, fill=1, stroke=0)
        
        # SisoNova logo/text in header
        canvas.setFillColor(colors.white)
        canvas.setFont("Helvetica-Bold", 16)
        canvas.drawString(25*mm, A4[1] - 12*mm, "SisoNova")
        canvas.setFont("Helvetica", 10)
        canvas.drawString(25*mm, A4[1] - 8*mm, "Financial Empowerment")
        
        # African pattern (simple geometric design)
        canvas.setFillColor(AFRICAN_EARTH)
        for i in range(5):
            x = A4[0] - 40*mm + (i * 6*mm)
            canvas.circle(x, A4[1] - 9*mm, 2*mm, fill=1)
        
        # Footer with African earth tones
        canvas.setFillColor(AFRICAN_CLAY)
        canvas.rect(0, 0, A4[0], 8*mm, fill=1, stroke=0)
        
        canvas.setFillColor(colors.white)
        canvas.setFont("Helvetica", 9)
        canvas.drawString(25*mm, 4*mm, f"Generated by SisoNova • {datetime.now().strftime('%Y-%m-%d %H:%M')}")
        canvas.drawRightString(A4[0] - 25*mm, 4*mm, f"Page {canvas.getPageNumber()}")
        
        canvas.restoreState()

    def _build_feelings_pdf_content(self, report_data: Dict[str, Any]) -> list:
        """Build African-styled feelings/wellness report content with visuals"""
        story = []
        
        # PAGE 1: Wellness Summary with Visual Dashboard
        story.append(self._create_african_summary_box(report_data.get('summary', {}), 'feelings'))
        story.append(Spacer(1, 30))
        
        # Overview description
        overview_desc = """
        This comprehensive wellness analysis provides insights into your financial emotional patterns over the past 6 months. 
        Understanding how you feel about money is crucial for making better financial decisions and building a healthier 
        relationship with your finances. Let's explore your emotional financial journey together.
        """
        story.append(Paragraph(overview_desc, self.description_style))
        
        # PAGE 2: Wellness Metrics with Visuals
        story.append(PageBreak())
        story.append(Paragraph("🧠 Your Financial Wellness Metrics", self.heading_style))
        
        metrics_desc = """
        These key metrics reveal your emotional relationship with money. Understanding your stress patterns and wellness 
        trends helps you identify triggers and develop strategies for better financial mental health.
        """
        story.append(Paragraph(metrics_desc, self.description_style))
        
        if 'summary' in report_data:
            summary = report_data['summary']
            
            # Wellness status with progress bar
            stress_level = summary.get('stress_level_percentage', 0)
            wellness_status = summary.get('wellness_status', 'Unknown')
            
            story.append(Paragraph("📊 Current Wellness Status", self.subheading_style))
            
            # Create wellness progress bar (inverted - lower stress is better)
            wellness_score = 100 - stress_level  # Convert stress to wellness score
            wellness_bar = self._create_progress_bar(
                wellness_score, 100, 
                f"Wellness Score: {wellness_score:.0f}% ({wellness_status})"
            )
            story.append(wellness_bar)
            story.append(Spacer(1, 20))
            
            # Feeling distribution pie chart
            feeling_distribution = summary.get('feeling_distribution', {})
            if feeling_distribution:
                story.append(Paragraph("🎭 Your Feeling Patterns", self.subheading_style))
                feelings_pie = self._create_pie_chart(
                    feeling_distribution,
                    "Distribution of Financial Feelings"
                )
                story.append(feelings_pie)
                story.append(Spacer(1, 20))
        
        # PAGE 3: Stress Analysis with Trends
        story.append(PageBreak())
        story.append(Paragraph("📈 Stress Analysis & Trends", self.heading_style))
        
        stress_desc = """
        Your stress patterns over time reveal important insights about your financial emotional health. 
        Understanding when and why you feel stressed about money helps you develop coping strategies 
        and make proactive changes to improve your financial wellness.
        """
        story.append(Paragraph(stress_desc, self.description_style))
        
        if 'stress_analysis' in report_data:
            stress_analysis = report_data['stress_analysis']
            
            # Monthly stress trends line chart
            monthly_trends = stress_analysis.get('monthly_stress_trends', {})
            if len(monthly_trends) > 1:
                story.append(Paragraph("Monthly Stress Trends", self.subheading_style))
                stress_chart = self._create_line_chart(monthly_trends, "Stress Levels Over Time")
                story.append(stress_chart)
                story.append(Spacer(1, 20))
            
            # Stress trend analysis
            trend_direction = stress_analysis.get('stress_trend_direction', 'Unknown')
            trend_color = AFRICAN_SAGE if 'Decreasing' in trend_direction else AFRICAN_RUST if 'Increasing' in trend_direction else AFRICAN_GOLD
            
            trend_text = f"""
            <b>Stress Trend:</b> <font color="{trend_color}"><b>{trend_direction}</b></font><br/>
            <b>High Stress Periods:</b> {len(stress_analysis.get('high_stress_periods', []))} months<br/>
            <b>Low Stress Periods:</b> {len(stress_analysis.get('low_stress_periods', []))} months
            """
            story.append(Paragraph(trend_text, self.body_style))
            story.append(Spacer(1, 20))
        
        # PAGE 4: Financial Correlation Analysis
        story.append(PageBreak())
        story.append(Paragraph("🔗 Money & Mood Connections", self.heading_style))
        
        correlation_desc = """
        Understanding how your financial activities affect your emotions helps you make more mindful money decisions. 
        These correlations reveal patterns between your spending, earning, and emotional well-being.
        """
        story.append(Paragraph(correlation_desc, self.description_style))
        
        if 'correlation_analysis' in report_data:
            correlation = report_data['correlation_analysis']
            
            # High expense day feelings
            high_expense_feelings = correlation.get('high_expense_day_feelings', [])
            if high_expense_feelings:
                story.append(Paragraph("💸 How You Feel on High Spending Days", self.subheading_style))
                
                feeling_counts = {}
                for feeling in high_expense_feelings:
                    feeling_counts[feeling] = feeling_counts.get(feeling, 0) + 1
                
                if feeling_counts:
                    expense_feelings_chart = self._create_bar_chart(
                        feeling_counts, 
                        "Feelings on High Expense Days"
                    )
                    story.append(expense_feelings_chart)
                    story.append(Spacer(1, 15))
            
            # Correlation insights
            insights = correlation.get('correlation_insights', [])
            if insights:
                story.append(Paragraph("🔍 Key Insights:", self.subheading_style))
                for insight in insights:
                    story.append(Paragraph(f"• {insight}", self.body_style))
                    story.append(Spacer(1, 5))
        
        # PAGE 5: Wellness Trends & Progress
        story.append(PageBreak())
        story.append(Paragraph("📊 Your Wellness Journey", self.heading_style))
        
        wellness_desc = """
        Tracking your wellness progress over time shows how your financial emotional health is evolving. 
        Celebrate improvements and identify areas where you can continue to grow your financial confidence.
        """
        story.append(Paragraph(wellness_desc, self.description_style))
        
        if 'wellness_trends' in report_data:
            wellness_trends = report_data['wellness_trends']
            
            # Weekly wellness chart
            weekly_scores = wellness_trends.get('weekly_wellness_scores', {})
            if len(weekly_scores) > 1:
                story.append(Paragraph("Weekly Wellness Progress", self.subheading_style))
                wellness_chart = self._create_line_chart(weekly_scores, "Wellness Scores Over Time")
                story.append(wellness_chart)
                story.append(Spacer(1, 20))
            
            # Best and worst periods
            best_week = wellness_trends.get('best_wellness_week', 'No data')
            worst_week = wellness_trends.get('worst_wellness_week', 'No data')
            wellness_trend = wellness_trends.get('wellness_trend', 'Unknown')
            
            trend_summary = f"""
            <b>Overall Trend:</b> {wellness_trend}<br/>
            <b>Best Wellness Period:</b> {best_week}<br/>
            <b>Most Challenging Period:</b> {worst_week}
            """
            story.append(Paragraph(trend_summary, self.body_style))
            story.append(Spacer(1, 20))
        
        # PAGE 6: Mental Health & Support
        story.append(PageBreak())
        story.append(Paragraph("🤝 Mental Health & Support", self.heading_style))
        
        support_desc = """
        Your mental health is just as important as your financial health. These insights help identify when you might 
        benefit from additional support and provide resources to help you maintain good financial emotional wellness.
        """
        story.append(Paragraph(support_desc, self.description_style))
        
        if 'mental_health_insights' in report_data:
            mental_health = report_data['mental_health_insights']
            
            risk_level = mental_health.get('mental_health_risk_level', 'Unknown')
            support_needed = mental_health.get('support_needed', False)
            positive_percentage = mental_health.get('positive_feelings_percentage', 0)
            
            # Risk assessment with color coding
            risk_color = AFRICAN_RUST if risk_level == 'High' else AFRICAN_GOLD if risk_level == 'Medium' else AFRICAN_SAGE
            
            mental_health_summary = f"""
            <b>Mental Health Risk Level:</b> <font color="{risk_color}"><b>{risk_level}</b></font><br/>
            <b>Positive Feelings:</b> {positive_percentage}% of the time<br/>
            <b>Support Recommended:</b> {'Yes' if support_needed else 'No'}
            """
            story.append(Paragraph(mental_health_summary, self.body_style))
            story.append(Spacer(1, 15))
            
            # Support resources
            support_resources = mental_health.get('support_resources', [])
            if support_resources:
                story.append(Paragraph("📞 Support Resources Available to You:", self.subheading_style))
                for resource in support_resources:
                    story.append(Paragraph(f"• {resource}", self.body_style))
                    story.append(Spacer(1, 5))
                story.append(Spacer(1, 15))
        
        # PAGE 7: Wellness Action Plan
        story.append(PageBreak())
        story.append(Paragraph("🎯 Your Wellness Action Plan", self.heading_style))
        
        action_desc = """
        Small, consistent actions can significantly improve your financial emotional health. This personalized 
        action plan provides specific steps you can take to build a healthier, more confident relationship with money.
        """
        story.append(Paragraph(action_desc, self.description_style))
        
        if 'support_recommendations' in report_data:
            story.append(Paragraph("🚀 Immediate Wellness Actions:", self.subheading_style))
            for i, rec in enumerate(report_data['support_recommendations'], 1):
                action_text = f"<b>Step {i}:</b> {rec}"
                story.append(Paragraph(action_text, self.body_style))
                story.append(Spacer(1, 8))
        
        # Motivational closing
        story.append(Spacer(1, 20))
        motivation_text = """
        <b>Remember:</b> Your financial wellness journey is unique and valuable. Every step you take toward understanding 
        and improving your relationship with money is an investment in your overall well-being. Be patient with yourself, 
        celebrate small victories, and remember that seeking support is a sign of strength, not weakness. You have the 
        power to create positive change in your financial emotional health.
        """
        story.append(Paragraph(motivation_text, self.highlight_style))
        
        return story
    
    def _build_expense_pdf_content(self, report_data: Dict[str, Any]) -> list:
        """Build African-styled expense report content with sections on new pages"""
        story = []
        
        # PAGE 1: Executive Summary
        story.append(self._create_african_summary_box(report_data.get('summary', {}), 'expense'))
        story.append(Spacer(1, 30))
        
        # Overview description
        overview_desc = """
        This comprehensive expense analysis provides insights into your spending patterns over the past 6 months. 
        Understanding where your money goes is the first step toward financial empowerment and building wealth 
        for your future. Let's explore your financial journey together.
        """
        story.append(Paragraph(overview_desc, self.description_style))
        
        # PAGE 2: Key Spending Metrics
        story.append(PageBreak())
        story.append(Paragraph("📊 Key Spending Metrics", self.heading_style))
        
        metrics_desc = """
        These key metrics reveal the foundation of your spending habits. By understanding your daily patterns 
        and transaction behaviors, we can identify opportunities to optimize your financial health and create 
        more room for savings and investments.
        """
        story.append(Paragraph(metrics_desc, self.description_style))
        
        if 'summary' in report_data:
            summary = report_data['summary']
            
            # Create metrics in a beautiful African-themed table
            metrics_data = [
                ['Metric', 'Value', 'Insight'],
                ['Total Expenses', f"R {summary.get('total_expenses', 0):,.2f}", self._get_expense_insight(summary.get('total_expenses', 0))],
                ['Daily Average', f"R {summary.get('average_daily_spending', 0):,.2f}", self._get_daily_insight(summary.get('average_daily_spending', 0))],
                ['Transaction Count', str(summary.get('total_transactions', 0)), f"{summary.get('total_transactions', 0)} purchases tracked"],
                ['Avg per Transaction', f"R {summary.get('average_transaction_size', 0):,.2f}", self._get_transaction_insight(summary.get('average_transaction_size', 0))]
            ]
            
            metrics_table = Table(metrics_data, colWidths=[45*mm, 35*mm, 70*mm])
            metrics_table.setStyle(self._get_african_table_style())
            story.append(metrics_table)
        
        # PAGE 3: Spending Categories
        story.append(PageBreak())
        story.append(Paragraph("🏷️ Spending Categories", self.heading_style))
        
        categories_desc = """
        Your spending categories tell the story of your priorities and lifestyle. This breakdown helps identify 
        which areas consume most of your resources and where you might find opportunities to redirect funds 
        toward your financial goals and dreams.
        """
        story.append(Paragraph(categories_desc, self.description_style))
        
        if 'category_analysis' in report_data:
            categories = report_data['category_analysis'].get('category_breakdown', {})
            
            # Sort categories by amount
            sorted_categories = sorted(categories.items(), key=lambda x: x[1].get('total', 0), reverse=True)
            
            category_data = [['Category', 'Amount', 'Transactions', 'Avg per Transaction', '% of Total']]
            for category, data in sorted_categories:
                avg_per_transaction = data.get('total', 0) / max(data.get('count', 1), 1)
                category_data.append([
                    category,
                    f"R {data.get('total', 0):,.2f}",
                    str(data.get('count', 0)),
                    f"R {avg_per_transaction:,.2f}",
                    f"{data.get('percentage', 0):.1f}%"
                ])
            
            category_table = Table(category_data, colWidths=[40*mm, 30*mm, 25*mm, 30*mm, 25*mm])
            category_table.setStyle(self._get_african_category_table_style())
            story.append(category_table)
            story.append(Spacer(1, 20))
            
            # Essential vs Non-essential analysis
            essential_data = report_data['category_analysis'].get('essential_vs_non_essential', {})
            if essential_data:
                story.append(Paragraph("⚖️ Essential vs Non-Essential Analysis", self.subheading_style))
                
                essential_pct = essential_data.get('essential_percentage', 0)
                status_color = AFRICAN_SAGE if essential_pct >= 70 else AFRICAN_GOLD if essential_pct >= 50 else AFRICAN_RUST
                status_text = "Excellent Balance" if essential_pct >= 70 else "Good Balance" if essential_pct >= 50 else "Needs Attention"
                
                essential_summary = f"""
                <b>Essential Spending:</b> R {essential_data.get('essential_total', 0):,.2f} ({essential_pct:.1f}%)<br/>
                <b>Non-Essential Spending:</b> R {essential_data.get('non_essential_total', 0):,.2f} ({100-essential_pct:.1f}%)<br/>
                <b>Balance Status:</b> <font color="{status_color}"><b>{status_text}</b></font>
                """
                story.append(Paragraph(essential_summary, self.body_style))
        
        # PAGE 4: Savings Opportunities
        story.append(PageBreak())
        story.append(Paragraph("💡 Savings Opportunities", self.heading_style))
        
        savings_desc = """
        Every rand saved is a rand that can work toward your future. These identified opportunities represent 
        concrete steps you can take to free up money for emergency funds, investments, or achieving your dreams. 
        Small changes can lead to significant financial transformation.
        """
        story.append(Paragraph(savings_desc, self.description_style))
        
        if 'cost_cutting_opportunities' in report_data:
            opportunities = report_data['cost_cutting_opportunities']
            
            total_savings = sum(opp.get('potential_savings', 0) for opp in opportunities)
            story.append(Paragraph(f"<b>🎯 Total Monthly Savings Potential: R {total_savings:,.2f}</b>", self.highlight_style))
            story.append(Spacer(1, 15))
            
            for i, opp in enumerate(opportunities, 1):
                priority_color = AFRICAN_RUST if opp.get('priority') == 'High' else AFRICAN_GOLD if opp.get('priority') == 'Medium' else AFRICAN_SAGE
                
                opp_text = f"""
                <b>{i}. {opp.get('category', 'Unknown Category')}</b> 
                <font color="{priority_color}"><b>({opp.get('priority', 'Medium')} Priority)</b></font><br/>
                💰 <b>Monthly Savings Potential:</b> R {opp.get('potential_savings', 0):,.2f}<br/>
                📋 <b>Recommended Action:</b> {opp.get('recommendation', 'No recommendation')}<br/>
                """
                story.append(Paragraph(opp_text, self.body_style))
                story.append(Spacer(1, 12))
        
        # PAGE 5: Spending Patterns
        story.append(PageBreak())
        story.append(Paragraph("📈 Spending Patterns", self.heading_style))
        
        patterns_desc = """
        Your spending patterns reveal the rhythm of your financial life. Understanding when and how you spend 
        helps you make conscious choices about your money and develop strategies that align with your natural 
        habits while supporting your financial goals.
        """
        story.append(Paragraph(patterns_desc, self.description_style))
        
        if 'spending_patterns' in report_data:
            patterns = report_data['spending_patterns']
            
            # Create a beautiful patterns summary table
            patterns_data = [
                ['Pattern Type', 'Details', 'Insight'],
                ['Peak Spending Day', patterns.get('peak_spending_day', 'Unknown'), 'Plan extra carefully on this day'],
                ['Daily Frequency', f"{patterns.get('spending_frequency', 0):.1f} transactions/day", 'Your spending rhythm'],
            ]
            
            # Month part analysis
            month_parts = patterns.get('month_part_spending', {})
            if month_parts:
                beginning = month_parts.get('Beginning', 0)
                middle = month_parts.get('Middle', 0)
                end = month_parts.get('End', 0)
                
                patterns_data.extend([
                    ['Early Month', f"R {beginning:,.0f}", 'Start of month spending'],
                    ['Mid Month', f"R {middle:,.0f}", 'Middle of month spending'],
                    ['Late Month', f"R {end:,.0f}", 'End of month spending']
                ])
            
            patterns_table = Table(patterns_data, colWidths=[40*mm, 40*mm, 60*mm])
            patterns_table.setStyle(self._get_african_patterns_table_style())
            story.append(patterns_table)
        
        # PAGE 6: Action Plan
        story.append(PageBreak())
        story.append(Paragraph("🎯 Your Personal Action Plan", self.heading_style))
        
        action_desc = """
        Knowledge without action is just information. This personalized action plan provides specific, 
        achievable steps tailored to your unique financial situation. Each recommendation is designed 
        to move you closer to financial freedom and prosperity.
        """
        story.append(Paragraph(action_desc, self.description_style))
        
        if 'recommendations' in report_data:
            story.append(Paragraph("🚀 Immediate Actions You Can Take:", self.subheading_style))
            for i, rec in enumerate(report_data['recommendations'], 1):
                action_text = f"<b>Step {i}:</b> {rec}"
                story.append(Paragraph(action_text, self.body_style))
                story.append(Spacer(1, 8))
        
        # Motivational closing
        story.append(Spacer(1, 20))
        motivation_text = """
        <b>Remember:</b> Every financial journey begins with a single step. You've already taken the most 
        important step by tracking and analyzing your expenses. Stay committed to your goals, celebrate 
        small wins, and remember that building wealth is a marathon, not a sprint. Your future self will 
        thank you for the decisions you make today.
        """
        story.append(Paragraph(motivation_text, self.highlight_style))
        
        return story
    
    def _create_african_summary_box(self, summary: Dict[str, Any], report_type: str) -> Table:
        """Create an attractive African-themed summary box"""
        if report_type == 'expense':
            total = summary.get('total_expenses', 0)
            daily = summary.get('average_daily_spending', 0)
            status = self._get_spending_status(total)

            summary_data = [
                ['📊 Total Expenses', '📅 Daily Average', '🎯 Financial Status'],
                [f'R {total:,.2f}', f'R {daily:,.2f}', status]
            ]
        elif report_type == 'income':
            total = summary.get('total_income', 0)
            daily = summary.get('monthly_average', 0)
            status = self._get_income_status(total)
            summary_data = [
                ['📊 Total Incomes', '📅 Daily Average', '🎯 Financial Status'],
                [f'R {total:,.2f}', f'R {daily:,.2f}', status]
            ]
        else:
            total = 0
            daily = 0
            status = "Unknown"
            summary_data = [
                ['📊 Total', '📅 Average', '🎯 Status'],
                [f'R {total:,.2f}', f'R {daily:,.2f}', status]
            ]
        
        summary_table = Table(summary_data, colWidths=[50*mm, 50*mm, 50*mm])
        summary_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), AFRICAN_SUNSET),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
            ('BACKGROUND', (0, 1), (-1, 1), AFRICAN_LIGHT_GOLD),
            ('TEXTCOLOR', (0, 1), (-1, 1), AFRICAN_EARTH),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTNAME', (0, 1), (-1, 1), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 11),
            ('FONTSIZE', (0, 1), (-1, 1), 14),
            ('PADDING', (0, 0), (-1, -1), 15),
            ('GRID', (0, 0), (-1, -1), 2, AFRICAN_EARTH),
            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE')
        ]))
        
        return summary_table
    
    def _get_african_table_style(self) -> TableStyle:
        """African-inspired table styling"""
        return TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), AFRICAN_SUNSET),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 11),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('TOPPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.white),
            ('TEXTCOLOR', (0, 1), (-1, -1), AFRICAN_DEEP_EARTH),
            ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 1), (-1, -1), 10),
            ('PADDING', (0, 1), (-1, -1), 10),
            ('GRID', (0, 0), (-1, -1), 1, AFRICAN_CLAY),
            ('ROWBACKGROUNDS', (0, 1), (-1, -1), [colors.white, AFRICAN_CREAM])
        ])
    
    def _get_african_category_table_style(self) -> TableStyle:
        """Category-specific African table styling"""
        return TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), AFRICAN_EARTH),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('ALIGN', (1, 0), (-1, -1), 'RIGHT'),  # Right align numbers
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 11),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('TOPPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.white),
            ('TEXTCOLOR', (0, 1), (-1, -1), AFRICAN_DEEP_EARTH),
            ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 1), (-1, -1), 10),
            ('PADDING', (0, 1), (-1, -1), 10),
            ('GRID', (0, 0), (-1, -1), 1, AFRICAN_CLAY),
            ('ROWBACKGROUNDS', (0, 1), (-1, -1), [colors.white, AFRICAN_LIGHT_SAGE])
        ])
    
    def _get_african_patterns_table_style(self) -> TableStyle:
        """Patterns-specific African table styling"""
        return TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), AFRICAN_GOLD),
            ('TEXTCOLOR', (0, 0), (-1, 0), AFRICAN_DEEP_EARTH),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 11),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('TOPPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.white),
            ('TEXTCOLOR', (0, 1), (-1, -1), AFRICAN_DEEP_EARTH),
            ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 1), (-1, -1), 10),
            ('PADDING', (0, 1), (-1, -1), 10),
            ('GRID', (0, 0), (-1, -1), 1, AFRICAN_CLAY),
            ('ROWBACKGROUNDS', (0, 1), (-1, -1), [colors.white, AFRICAN_LIGHT_GOLD])
        ])
    
    def _get_expense_insight(self, amount: float) -> str:
        if amount > 50000:
            return "High spending period"
        elif amount > 20000:
            return "Moderate spending"
        else:
            return "Conservative spending"
    
    def _get_daily_insight(self, amount: float) -> str:
        if amount > 300:
            return "Above average daily spend"
        elif amount > 150:
            return "Moderate daily spend"
        else:
            return "Conservative daily spend"
    
    def _get_transaction_insight(self, amount: float) -> str:
        if amount > 500:
            return "Large transactions"
        elif amount > 100:
            return "Medium transactions"
        else:
            return "Small transactions"
    
    def _get_spending_status(self, amount: float) -> str:
        if amount > 50000:
            return "High Spender"
        elif amount > 20000:
            return "Moderate Spender"
        else:
            return "Conservative Spender"
    
    def _get_income_status(self, amount: float) -> str:
        if amount > 50000:
            return "High Earner"
        elif amount > 20000:
            return "Moderate Earner"
        else:
            return "Building Income"
        
    def _get_income_insight(self, amount: float) -> str:
        """Get insight text for income amounts"""
        if amount > 50000:
            return "Strong income period"
        elif amount > 20000:
            return "Moderate income"
        else:
            return "Building income base"

    def _get_monthly_insight(self, amount: float) -> str:
        """Get insight text for monthly income averages"""
        if amount > 8000:
            return "Above average monthly income"
        elif amount > 4000:
            return "Moderate monthly income"
        else:
            return "Growing monthly income"

    def _get_income_event_insight(self, amount: float) -> str:
        """Get insight text for income per event"""
        if amount > 2000:
            return "Large income events"
        elif amount > 500:
            return "Medium income events"
        else:
            return "Small income events"

    def _get_stability_status(self, score: float) -> str:
        """Get status text for stability score"""
        if score >= 80:
            return "Very Stable"
        elif score >= 60:
            return "Moderately Stable"
        elif score >= 40:
            return "Somewhat Unstable"
        else:
            return "Highly Variable"

    def _calculate_consistency_rating(self, stability_data: dict) -> str:
        """Calculate consistency rating from stability data"""
        score = stability_data.get('stability_score', 0)
        if score >= 80:
            return "Highly Consistent"
        elif score >= 60:
            return "Moderately Consistent"
        elif score >= 40:
            return "Somewhat Inconsistent"
        else:
            return "Highly Variable"
    
    def _build_income_pdf_content(self, report_data: Dict[str, Any]) -> list:
        """Build African-styled income report content with sections on new pages - matching expense structure"""
        story = []
        
        # PAGE 1: Executive Summary
        story.append(self._create_african_summary_box(report_data.get('summary', {}), 'income'))
        story.append(Spacer(1, 30))
        
        # Overview description
        overview_desc = """
        This comprehensive income analysis provides insights into your earning patterns over the past 6 months. 
        Understanding your income sources and emotional patterns is the foundation for building financial security 
        and growing your wealth. Let's explore your income journey together.
        """
        story.append(Paragraph(overview_desc, self.description_style))
        
        # PAGE 2: Key Income Metrics
        story.append(PageBreak())
        story.append(Paragraph("📊 Key Income Metrics", self.heading_style))
        
        metrics_desc = """
        These key metrics reveal the foundation of your earning patterns. By understanding your income frequency, 
        sources, and stability, we can identify opportunities to optimize your financial growth and create 
        more consistent income streams.
        """
        story.append(Paragraph(metrics_desc, self.description_style))
        
        if 'summary' in report_data:
            summary = report_data['summary']
            
            # Create metrics in a beautiful African-themed table
            metrics_data = [
                ['Metric', 'Value', 'Insight'],
                ['Total Income', f"R {summary.get('total_income', 0):,.2f}", self._get_income_insight(summary.get('total_income', 0))],
                ['Monthly Average', f"R {summary.get('monthly_average', 0):,.2f}", self._get_monthly_insight(summary.get('monthly_average', 0))],
                ['Income Events', str(summary.get('total_income_events', 0)), f"{summary.get('total_income_events', 0)} income receipts tracked"],
                ['Avg per Event', f"R {summary.get('average_income_per_event', 0):,.2f}", self._get_income_event_insight(summary.get('average_income_per_event', 0))]
            ]
            
            if 'largest_income' in summary:
                largest = summary['largest_income']
                metrics_data.append(['Largest Income', f"R {largest.get('amount', 0):,.2f}", f"From {largest.get('type', 'Unknown')} source"])
            
            metrics_table = Table(metrics_data, colWidths=[45*mm, 35*mm, 70*mm])
            metrics_table.setStyle(self._get_african_table_style())
            story.append(metrics_table)
        
        # PAGE 3: Income Sources Analysis
        story.append(PageBreak())
        story.append(Paragraph("🏢 Income Sources Analysis", self.heading_style))
        
        sources_desc = """
        Your income sources tell the story of your financial foundation and security. This breakdown helps identify 
        which sources provide the most stability and where you might find opportunities to diversify or strengthen 
        your earning potential for long-term financial growth.
        """
        story.append(Paragraph(sources_desc, self.description_style))
        
        if 'source_analysis' in report_data:
            sources = report_data['source_analysis'].get('source_breakdown', {})
            
            # Sort sources by amount
            sorted_sources = sorted(sources.items(), key=lambda x: x[1].get('total', 0), reverse=True)
            
            source_data = [['Income Source', 'Amount', 'Count', 'Average', '% of Total']]
            for source, data in sorted_sources:
                source_data.append([
                    source,
                    f"R {data.get('total', 0):,.2f}",
                    str(data.get('count', 0)),
                    f"R {data.get('average', 0):,.2f}",
                    f"{data.get('percentage', 0):.1f}%"
                ])
            
            source_table = Table(source_data, colWidths=[40*mm, 30*mm, 20*mm, 30*mm, 25*mm])
            source_table.setStyle(self._get_african_category_table_style())
            story.append(source_table)
            story.append(Spacer(1, 20))
            
            # Primary vs Secondary income analysis
            if sorted_sources:
                primary_source = sorted_sources[0]
                primary_percentage = primary_source[1].get('percentage', 0)
                
                story.append(Paragraph("⚖️ Income Diversification Analysis", self.subheading_style))
                
                diversification_status = "High Dependency" if primary_percentage > 80 else "Moderate Dependency" if primary_percentage > 60 else "Well Diversified"
                status_color = AFRICAN_RUST if primary_percentage > 80 else AFRICAN_GOLD if primary_percentage > 60 else AFRICAN_SAGE
                
                diversification_summary = f"""
                <b>Primary Income Source:</b> {primary_source[0]} ({primary_percentage:.1f}%)<br/>
                <b>Diversification Status:</b> <font color="{status_color}"><b>{diversification_status}</b></font><br/>
                <b>Risk Level:</b> {"High" if primary_percentage > 80 else "Medium" if primary_percentage > 60 else "Low"}
                """
                story.append(Paragraph(diversification_summary, self.body_style))
        
        # PAGE 4: Income Stability & Growth
        story.append(PageBreak())
        story.append(Paragraph("📈 Income Stability & Growth Opportunities", self.heading_style))
        
        stability_desc = """
        Income stability is crucial for financial planning and peace of mind. These insights reveal how predictable 
        your income is and identify specific opportunities to increase your earning potential and build a more 
        secure financial future.
        """
        story.append(Paragraph(stability_desc, self.description_style))
        
        # Stability Analysis
        if 'stability_analysis' in report_data:
            stability = report_data['stability_analysis']
            
            stability_data = [
                ['Stability Metric', 'Score', 'Status'],
                ['Overall Stability Score', f"{stability.get('stability_score', 0):.1f}/100", self._get_stability_status(stability.get('stability_score', 0))],
                ['Regular Income %', f"{stability.get('income_predictability', {}).get('regular_percentage', 0):.1f}%", 'Predictable income sources'],
                ['Income Consistency', self._calculate_consistency_rating(stability), 'Month-to-month reliability']
            ]
            
            stability_table = Table(stability_data, colWidths=[50*mm, 30*mm, 70*mm])
            stability_table.setStyle(self._get_african_table_style())
            story.append(stability_table)
            story.append(Spacer(1, 20))
        
        # Growth Opportunities
        if 'growth_opportunities' in report_data:
            story.append(Paragraph("🚀 Growth Opportunities", self.subheading_style))
            opportunities = report_data['growth_opportunities']
            
            for i, opp in enumerate(opportunities, 1):
                priority_color = AFRICAN_SAGE if opp.get('priority') == 'High' else AFRICAN_GOLD if opp.get('priority') == 'Medium' else AFRICAN_CLAY
                
                opp_text = f"""
                <b>{i}. {opp.get('type', 'Unknown Opportunity')}</b> 
                <font color="{priority_color}"><b>({opp.get('priority', 'Medium')} Priority)</b></font><br/>
                💰 <b>Potential Monthly Increase:</b> {opp.get('potential_monthly_increase', 'Unknown')}<br/>
                📋 <b>Action Required:</b> {opp.get('action_required', 'No action specified')}<br/>
                📝 <b>Description:</b> {opp.get('description', 'No description available')}<br/>
                """
                story.append(Paragraph(opp_text, self.body_style))
                story.append(Spacer(1, 12))
        
        # PAGE 5: Income Behavioral Triggers (NEW SECTION)
        story.append(PageBreak())
        story.append(Paragraph("🧠 Your Income Behavioral Patterns", self.heading_style))
        
        behavior_desc = """
        Understanding how you emotionally respond to different income situations helps you make better financial 
        decisions and optimize your earning behavior. These insights reveal specific patterns that affect how you 
        pursue, receive, and feel about your income.
        """
        story.append(Paragraph(behavior_desc, self.description_style))
        
        # Add behavioral analysis section
        story.extend(self._build_income_behavior_triggers_section(report_data))
        
        # PAGE 6: Action Plan
        story.append(PageBreak())
        story.append(Paragraph("🎯 Your Personal Income Action Plan", self.heading_style))
        
        action_desc = """
        Knowledge without action is just information. This personalized action plan provides specific, 
        achievable steps tailored to your unique income situation. Each recommendation is designed 
        to help you increase your earning potential and build long-term financial security.
        """
        story.append(Paragraph(action_desc, self.description_style))
        
        if 'recommendations' in report_data:
            story.append(Paragraph("🚀 Immediate Actions You Can Take:", self.subheading_style))
            for i, rec in enumerate(report_data['recommendations'], 1):
                action_text = f"<b>Step {i}:</b> {rec}"
                story.append(Paragraph(action_text, self.body_style))
                story.append(Spacer(1, 8))
        
        # Motivational closing
        story.append(Spacer(1, 20))
        motivation_text = """
        <b>Remember:</b> Every income journey is unique, and you have the power to shape your financial future. 
        You've already taken an important step by tracking and analyzing your income patterns. Use these insights 
        to make informed decisions, celebrate your progress, and stay focused on building the financial life you deserve. 
        Your future self will thank you for the actions you take today.
        """
        story.append(Paragraph(motivation_text, self.highlight_style))
        
        return story
    
    def _build_feelings_pdf_content(self, report_data: Dict[str, Any]) -> list:
        """Build PDF content for feelings reports"""
        story = []
        
        # Summary Section
        if 'summary' in report_data:
            story.append(Paragraph("Financial Wellness Summary", self.heading_style))
            summary = report_data['summary']
            
            summary_data = [
                ['Total Entries:', str(summary.get('total_feeling_entries', 0))],
                ['Most Common Feeling:', summary.get('most_common_feeling', 'Unknown')],
                ['Stress Level:', f"{summary.get('stress_level_percentage', 0)}%"],
                ['Wellness Status:', summary.get('wellness_status', 'Unknown')]
            ]
            
            summary_table = Table(summary_data, colWidths=[2.5*inch, 2.5*inch])
            summary_table.setStyle(self._get_table_style())
            story.append(summary_table)
            story.append(Spacer(1, 20))
            
            # Feeling Distribution
            if 'feeling_distribution' in summary:
                story.append(Paragraph("Feeling Distribution", self.subheading_style))
                feelings = summary['feeling_distribution']
                feeling_data = [['Feeling', 'Count']]
                for feeling, count in feelings.items():
                    feeling_data.append([feeling, str(count)])
                
                feeling_table = Table(feeling_data, colWidths=[2.5*inch, 1.5*inch])
                feeling_table.setStyle(self._get_table_style())
                story.append(feeling_table)
                story.append(Spacer(1, 20))
        
        # Stress Analysis
        if 'stress_analysis' in report_data:
            story.append(Paragraph("Stress Analysis", self.heading_style))
            stress = report_data['stress_analysis']
            
            stress_data = [
                ['Stress Trend:', stress.get('stress_trend_direction', 'Unknown')],
                ['High Stress Periods:', str(len(stress.get('high_stress_periods', [])))],
                ['Low Stress Periods:', str(len(stress.get('low_stress_periods', [])))]
            ]
            
            stress_table = Table(stress_data, colWidths=[2.5*inch, 2*inch])
            stress_table.setStyle(self._get_table_style())
            story.append(stress_table)
            story.append(Spacer(1, 20))
        
        # Mental Health Insights
        if 'mental_health_insights' in report_data:
            story.append(Paragraph("Mental Health Assessment", self.heading_style))
            mental_health = report_data['mental_health_insights']
            
            story.append(Paragraph(f"Risk Level: {mental_health.get('mental_health_risk_level', 'Unknown')}", self.styles['Normal']))
            story.append(Paragraph(f"Positive Feelings: {mental_health.get('positive_feelings_percentage', 0)}%", self.styles['Normal']))
            
            if mental_health.get('support_resources'):
                story.append(Paragraph("Support Resources:", self.styles['Normal']))
                for resource in mental_health['support_resources']:
                    story.append(Paragraph(f"• {resource}", self.styles['Normal']))
            
            story.append(Spacer(1, 20))
        
        # Support Recommendations
        if 'support_recommendations' in report_data:
            story.append(Paragraph("Wellness Recommendations", self.heading_style))
            for rec in report_data['support_recommendations']:
                story.append(Paragraph(f"• {rec}", self.styles['Normal']))
            story.append(Spacer(1, 20))
        
        return story
    
    def _build_comprehensive_pdf_content(self, report_data: Dict[str, Any]) -> list:
        """Build PDF content for comprehensive reports (fallback)"""
        # This is the same as the original generate_financial_report_pdf content
        # but returned as a list for consistency
        story = []
        
        # Summary Section
        if 'summary' in report_data:
            story.append(Paragraph("Financial Summary", self.heading_style))
            summary = report_data['summary']
            summary_data = [
                ['Total Income:', f"R {summary.get('total_income', 0):,.2f}"],
                ['Total Expenses:', f"R {summary.get('total_expenses', 0):,.2f}"],
                ['Net Position:', f"R {summary.get('net_position', 0):,.2f}"],
                ['Savings Rate:', f"{summary.get('savings_rate', 0)}%"],
                ['Daily Spending:', f"R {summary.get('average_daily_spending', 0):,.2f}"],
                ['Status:', summary.get('financial_status', 'Unknown')]
            ]
            
            summary_table = Table(summary_data, colWidths=[2*inch, 2*inch])
            summary_table.setStyle(self._get_table_style())
            story.append(summary_table)
            story.append(Spacer(1, 20))
        
        # Add other sections as needed...
        return story
    
    def _get_table_style(self) -> TableStyle:
        """Get consistent table styling"""
        return TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.lightgrey),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 10),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ])
    
    def _build_income_behavior_triggers_section(self, report_data: Dict[str, Any]) -> list:
        """Build the behavioral triggers section for PAGE 5 - focused on actionable insights"""
        story = []
        
        behavior_data = report_data.get('income_behavior_triggers', {})
        print(f"DEBUG: Behavior data structure: {behavior_data}")
        
        # Check if we have behavioral data using the correct key
        if not behavior_data.get('has_data', False):
            # Brief section if no behavioral data
            no_data_desc = """
            Start tracking how you feel about your income to unlock powerful behavioral insights. 
            Understanding your emotional patterns with money helps you make better financial decisions 
            and optimize your income-earning behavior.
            """
            story.append(Paragraph(no_data_desc, self.body_style))
            story.append(Spacer(1, 15))
            
            # Encourage tracking
            story.append(Paragraph("💡 How to unlock behavioral insights:", self.subheading_style))
            tracking_tips = [
                "Track your feelings each time you receive income",
                "Note which income sources make you feel most confident",
                "Pay attention to timing patterns in your income confidence",
                "Record your emotional state when pursuing income opportunities"
            ]
            
            for tip in tracking_tips:
                story.append(Paragraph(f"• {tip}", self.body_style))
                story.append(Spacer(1, 5))
            
            return story
        
        # If behavioral data is available, show the insights
        # Use the correct key names from your actual data structure
        insights = behavior_data.get('behavioral_insights', [])
        patterns_found = len(insights)
        
        if patterns_found > 0:
            intro_text = f"""
            We analyzed your income feelings and found {patterns_found} specific behavioral patterns that affect 
            your financial decisions. Use these insights to optimize when and how you pursue income opportunities.
            """
            story.append(Paragraph(intro_text, self.body_style))
            story.append(Spacer(1, 15))
            
            # Display behavioral insights (max 3 for clarity)
            for i, insight in enumerate(insights[:3], 1):
                # Insight header
                insight_title = f"{i}. {insight.get('type', 'Behavioral Pattern').replace('_', ' ').title()}"
                story.append(Paragraph(insight_title, self.subheading_style))
                story.append(Spacer(1, 8))
                
                # Pattern description
                pattern_text = insight.get('insight', 'No pattern description available')
                story.append(Paragraph(f"<b>📊 Pattern:</b> {pattern_text}", self.body_style))
                story.append(Spacer(1, 5))
                
                # Behavior change recommendation
                behavior_change = insight.get('behavior_change', 'No behavior change recommendation available')
                story.append(Paragraph(f"<b>🎯 Recommended Change:</b> {behavior_change}", self.body_style))
                story.append(Spacer(1, 5))
                
                # Specific action (highlighted)
                specific_action = insight.get('specific_action', 'No specific action specified')
                story.append(Paragraph(f"<b>💡 Next Step:</b> {specific_action}", self.highlight_style))
                
                story.append(Spacer(1, 15))
        else:
            # If has_data is True but no insights found
            story.append(Paragraph("📊 Behavioral Analysis in Progress", self.subheading_style))
            story.append(Paragraph("We're analyzing your income patterns. Keep tracking your feelings to unlock more insights!", self.body_style))
            story.append(Spacer(1, 15))
        
        # Show behavior change recommendations
        recommendations = behavior_data.get('behavior_change_recommendations', [])
        if recommendations:
            story.append(Paragraph("🎯 Behavior Change Action Plan", self.subheading_style))
            
            strategy_desc = """
            Based on your income patterns, here are specific actions you can take to improve your financial behavior:
            """
            story.append(Paragraph(strategy_desc, self.body_style))
            story.append(Spacer(1, 10))
            
            for i, rec in enumerate(recommendations, 1):
                story.append(Paragraph(f"<b>{i}.</b> {rec}", self.body_style))
                story.append(Spacer(1, 8))
        
        # Quick action checklist
        story.append(Paragraph("✅ Quick Action Checklist", self.subheading_style))
        
        checklist_desc = """
        Use this checklist to immediately apply your behavioral insights:
        """
        story.append(Paragraph(checklist_desc, self.body_style))
        story.append(Spacer(1, 10))
        
        # Generate checklist from insights and recommendations
        checklist_items = []
        
        # Add specific actions from insights
        for insight in insights[:3]:
            specific_action = insight.get('specific_action', '')
            if specific_action:
                checklist_items.append(f"☐ {specific_action}")
        
        # Add general behavioral items
        checklist_items.extend([
            "☐ Track your income feelings for the next 2 weeks",
            "☐ Schedule income activities for your optimal days/times",
            "☐ Focus effort on income sources that make you feel best",
            "☐ Set income targets based on your confidence patterns"
        ])
        
        for item in checklist_items[:5]:  # Max 5 items
            story.append(Paragraph(item, self.body_style))
            story.append(Spacer(1, 5))
        
        return story