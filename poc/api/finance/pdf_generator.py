# api/utils/pdf_generator.py
from reportlab.lib.pagesizes import letter, A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, PageBreak, Image
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch, mm
from reportlab.lib import colors
from reportlab.lib.colors import HexColor
from reportlab.platypus.tableofcontents import TableOfContents
from reportlab.graphics.shapes import Drawing, Rect
from reportlab.platypus.flowables import Flowable
from datetime import datetime
import io
from typing import Dict, Any

# SisoNova Brand Colors
SISONOVA_BLUE = HexColor('#1E3A8A')      # Deep blue
SISONOVA_GREEN = HexColor('#059669')      # Emerald green  
SISONOVA_LIGHT_BLUE = HexColor('#DBEAFE') # Light blue
SISONOVA_LIGHT_GREEN = HexColor('#D1FAE5') # Light green
SISONOVA_GRAY = HexColor('#6B7280')       # Professional gray
SISONOVA_DARK_GRAY = HexColor('#374151')  # Dark gray
SISONOVA_ACCENT = HexColor('#F59E0B')     # Amber accent

class SisoNovaHeaderFooter(Flowable):
    """Custom header/footer for SisoNova branding"""
    
    def __init__(self, width, height, is_header=True, report_type="Financial Report"):
        Flowable.__init__(self)
        self.width = width
        self.height = height
        self.is_header = is_header
        self.report_type = report_type
    
    def draw(self):
        if self.is_header:
            # Header with SisoNova branding
            self.canv.setFillColor(SISONOVA_BLUE)
            self.canv.rect(0, 0, self.width, self.height, fill=1, stroke=0)
            
            # SisoNova logo text (you can replace with actual logo image)
            self.canv.setFillColor(colors.white)
            self.canv.setFont("Helvetica-Bold", 16)
            self.canv.drawString(20, self.height/2 - 5, "SisoNova")
            
            # Report type
            self.canv.setFont("Helvetica", 10)
            self.canv.drawRightString(self.width - 20, self.height/2 - 5, self.report_type)
        else:
            # Footer
            self.canv.setFillColor(SISONOVA_GRAY)
            self.canv.setFont("Helvetica", 8)
            self.canv.drawString(20, self.height/2, f"Generated by SisoNova • {datetime.now().strftime('%Y-%m-%d %H:%M')}")
            self.canv.drawRightString(self.width - 20, self.height/2, f"Page {self.canv.getPageNumber()}")

class FinancialReportPDF:
    """Generate PDF financial reports for WhatsApp delivery"""

    def __init__(self):
        self.styles = getSampleStyleSheet()
        self._setup_custom_styles()
    
    def _setup_custom_styles(self):
        """Setup SisoNova branded styles"""
        
        # Main title style
        self.title_style = ParagraphStyle(
            'SisoNovaTitle',
            parent=self.styles['Heading1'],
            fontSize=24,
            spaceAfter=30,
            spaceBefore=20,
            textColor=SISONOVA_BLUE,
            fontName='Helvetica-Bold',
            alignment=1  # Center alignment
        )
        
        # Section heading style
        self.heading_style = ParagraphStyle(
            'SisoNovaHeading',
            parent=self.styles['Heading2'],
            fontSize=14,
            spaceAfter=15,
            spaceBefore=20,
            textColor=SISONOVA_BLUE,
            fontName='Helvetica-Bold',
            borderWidth=0,
            borderColor=SISONOVA_BLUE,
            borderPadding=5
        )
        
        # Subheading style
        self.subheading_style = ParagraphStyle(
            'SisoNovaSubHeading',
            parent=self.styles['Heading3'],
            fontSize=12,
            spaceAfter=10,
            spaceBefore=15,
            textColor=SISONOVA_GREEN,
            fontName='Helvetica-Bold'
        )
        
        # Body text style
        self.body_style = ParagraphStyle(
            'SisoNovaBody',
            parent=self.styles['Normal'],
            fontSize=10,
            spaceAfter=6,
            textColor=SISONOVA_DARK_GRAY,
            fontName='Helvetica'
        )
        
        # Highlight style for important numbers
        self.highlight_style = ParagraphStyle(
            'SisoNovaHighlight',
            parent=self.styles['Normal'],
            fontSize=11,
            spaceAfter=8,
            textColor=SISONOVA_GREEN,
            fontName='Helvetica-Bold'
        )
        
        # Warning style for concerns
        self.warning_style = ParagraphStyle(
            'SisoNovaWarning',
            parent=self.styles['Normal'],
            fontSize=10,
            spaceAfter=6,
            textColor=colors.red,
            fontName='Helvetica'
        )
    
    def generate_financial_report_pdf(self, report_data: Dict[str, Any], user_phone: str) -> bytes:
        """Generate PDF from comprehensive financial report data"""
        
        buffer = io.BytesIO()
        doc = SimpleDocTemplate(buffer, pagesize=A4, rightMargin=72, leftMargin=72,
                              topMargin=72, bottomMargin=18)
        
        # Build the PDF content
        story = []
        
        # Title
        title = Paragraph("Your Financial Report", self.title_style)
        story.append(title)
        story.append(Spacer(1, 12))
        
        # Period
        period_text = f"Report Period: {report_data['period']}"
        story.append(Paragraph(period_text, self.styles['Normal']))
        story.append(Spacer(1, 20))
        
        # Summary Section
        story.append(Paragraph("Financial Summary", self.heading_style))
        summary = report_data['summary']
        summary_data = [
            ['Total Income:', f"R {summary['total_income']:,.2f}"],
            ['Total Expenses:', f"R {summary['total_expenses']:,.2f}"],
            ['Net Position:', f"R {summary['net_position']:,.2f}"],
            ['Savings Rate:', f"{summary['savings_rate']}%"],
            ['Daily Spending:', f"R {summary['average_daily_spending']:,.2f}"],
            ['Status:', summary['financial_status']]
        ]
        
        summary_table = Table(summary_data, colWidths=[2*inch, 2*inch])
        summary_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.lightgrey),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 10),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))
        
        story.append(summary_table)
        story.append(Spacer(1, 20))
        
        # Category Breakdown
        story.append(Paragraph("Spending by Category", self.heading_style))
        categories = report_data['category_breakdown']['by_category']
        category_data = [['Category', 'Amount', 'Count']]
        for category, data in categories.items():
            category_data.append([category, f"R {data['total']:,.2f}", str(data['count'])])
        
        category_table = Table(category_data, colWidths=[2*inch, 1.5*inch, 1*inch])
        category_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.darkgreen),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 10),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.lightgreen),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))
        
        story.append(category_table)
        story.append(Spacer(1, 20))
        
        # Financial Health
        story.append(Paragraph("Financial Health Assessment", self.heading_style))
        health = report_data['financial_health']
        health_score = health['health_score']
        
        health_text = f"Health Score: {health_score['score']}/100 ({health_score['status']})"
        story.append(Paragraph(health_text, self.styles['Normal']))
        
        if health['stress_indicators']:
            story.append(Paragraph("Areas of Concern:", self.styles['Normal']))
            for indicator in health['stress_indicators']:
                story.append(Paragraph(f"• {indicator}", self.styles['Normal']))
        
        story.append(Spacer(1, 20))
        
        # Actionable Insights
        story.append(Paragraph("Recommendations", self.heading_style))
        insights = report_data['actionable_insights']
        for insight in insights:
            story.append(Paragraph(f"• {insight}", self.styles['Normal']))
        
        story.append(Spacer(1, 20))
        
        # Emergency Preparedness
        emergency = report_data['emergency_preparedness']
        story.append(Paragraph("Emergency Fund Status", self.heading_style))
        emergency_text = f"You can cover {emergency['months_covered']} months of expenses. {emergency['recommendation']}"
        story.append(Paragraph(emergency_text, self.styles['Normal']))
        
        # Footer
        story.append(Spacer(1, 30))
        footer_text = f"Report generated on {datetime.now().strftime('%Y-%m-%d %H:%M')} for {user_phone}"
        story.append(Paragraph(footer_text, self.styles['Normal']))
        
        # Build PDF
        doc.build(story)
        buffer.seek(0)
        return buffer.getvalue()
    
    def generate_category_report_pdf(self, report_data: Dict[str, Any], report_type: str, user_phone: str) -> bytes:
        """Generate professionally styled PDF for category-specific reports"""
        
        buffer = io.BytesIO()
        doc = SimpleDocTemplate(
            buffer, 
            pagesize=A4, 
            rightMargin=25*mm, 
            leftMargin=25*mm,
            topMargin=35*mm, 
            bottomMargin=25*mm
        )
        
        story = []
        
        # Add header space
        story.append(Spacer(1, 10*mm))
        
        # Determine report title and build content
        if report_type == "expenses":
            title = "Expense Analysis Report"
            story.extend(self._build_expense_pdf_content(report_data))
        elif report_type == "incomes":
            title = "Income Analysis Report"
            story.extend(self._build_income_pdf_content(report_data))
        elif report_type == "feelings":
            title = "Financial Wellness Report"
            story.extend(self._build_feelings_pdf_content(report_data))
        else:
            title = "Financial Report"
            story.extend(self._build_comprehensive_pdf_content(report_data))
        
        # Add title at the beginning
        title_paragraph = Paragraph(title, self.title_style)
        story.insert(0, title_paragraph)
        story.insert(1, Spacer(1, 15))
        
        # Add period if available
        if 'period' in report_data:
            period_text = f"<b>Report Period:</b> {report_data['period']}"
            story.insert(2, Paragraph(period_text, self.body_style))
            story.insert(3, Spacer(1, 20))
        
        # Build PDF with custom page template
        doc.build(story, onFirstPage=self._add_page_elements, onLaterPages=self._add_page_elements)
        buffer.seek(0)
        return buffer.getvalue()
    
    def _add_page_elements(self, canvas, doc):
        """Add header and footer to each page"""
        canvas.saveState()
        
        # Header
        header_height = 15*mm
        canvas.setFillColor(SISONOVA_BLUE)
        canvas.rect(0, A4[1] - header_height, A4[0], header_height, fill=1, stroke=0)
        
        # SisoNova logo/text in header
        canvas.setFillColor(colors.white)
        canvas.setFont("Helvetica-Bold", 14)
        canvas.drawString(25*mm, A4[1] - 10*mm, "SisoNova Financial Reports")
        
        # Footer
        canvas.setFillColor(SISONOVA_GRAY)
        canvas.setFont("Helvetica", 8)
        canvas.drawString(25*mm, 15*mm, f"Generated by SisoNova • {datetime.now().strftime('%Y-%m-%d %H:%M')}")
        canvas.drawRightString(A4[0] - 25*mm, 15*mm, f"Page {canvas.getPageNumber()}")
        
        canvas.restoreState()
    
    def _build_expense_pdf_content(self, report_data: Dict[str, Any]) -> list:
        """Build professionally styled expense report content"""
        story = []
        
        # Executive Summary Box
        story.append(self._create_summary_box(report_data.get('summary', {}), 'expense'))
        story.append(Spacer(1, 20))
        
        # Key Metrics Section
        if 'summary' in report_data:
            story.append(Paragraph("📊 Key Spending Metrics", self.heading_style))
            summary = report_data['summary']
            
            # Create metrics in a clean table
            metrics_data = [
                ['Metric', 'Value', 'Insight'],
                ['Total Expenses', f"R {summary.get('total_expenses', 0):,.2f}", self._get_expense_insight(summary.get('total_expenses', 0))],
                ['Daily Average', f"R {summary.get('average_daily_spending', 0):,.2f}", self._get_daily_insight(summary.get('average_daily_spending', 0))],
                ['Transaction Count', str(summary.get('total_transactions', 0)), f"{summary.get('total_transactions', 0)} purchases tracked"],
                ['Avg per Transaction', f"R {summary.get('average_transaction_size', 0):,.2f}", self._get_transaction_insight(summary.get('average_transaction_size', 0))]
            ]
            
            metrics_table = Table(metrics_data, colWidths=[45*mm, 35*mm, 70*mm])
            metrics_table.setStyle(self._get_modern_table_style())
            story.append(metrics_table)
            story.append(Spacer(1, 20))
        
        # Category Analysis with Visual Appeal
        if 'category_analysis' in report_data:
            story.append(Paragraph("🏷️ Spending Categories", self.heading_style))
            categories = report_data['category_analysis'].get('category_breakdown', {})
            
            # Sort categories by amount
            sorted_categories = sorted(categories.items(), key=lambda x: x[1].get('total', 0), reverse=True)
            
            category_data = [['Category', 'Amount', 'Transactions', 'Avg per Transaction', '% of Total']]
            for category, data in sorted_categories:
                avg_per_transaction = data.get('total', 0) / max(data.get('count', 1), 1)
                category_data.append([
                    category,
                    f"R {data.get('total', 0):,.2f}",
                    str(data.get('count', 0)),
                    f"R {avg_per_transaction:,.2f}",
                    f"{data.get('percentage', 0):.1f}%"
                ])
            
            category_table = Table(category_data, colWidths=[40*mm, 30*mm, 25*mm, 30*mm, 25*mm])
            category_table.setStyle(self._get_category_table_style())
            story.append(category_table)
            story.append(Spacer(1, 20))
            
            # Essential vs Non-essential with visual indicator
            essential_data = report_data['category_analysis'].get('essential_vs_non_essential', {})
            if essential_data:
                story.append(Paragraph("⚖️ Essential vs Non-Essential Analysis", self.subheading_style))
                
                essential_pct = essential_data.get('essential_percentage', 0)
                status_color = SISONOVA_GREEN if essential_pct >= 70 else SISONOVA_ACCENT if essential_pct >= 50 else colors.red
                status_text = "Excellent" if essential_pct >= 70 else "Good" if essential_pct >= 50 else "Needs Attention"
                
                essential_summary = f"""
                <b>Essential Spending:</b> R {essential_data.get('essential_total', 0):,.2f} ({essential_pct:.1f}%)<br/>
                <b>Non-Essential Spending:</b> R {essential_data.get('non_essential_total', 0):,.2f} ({100-essential_pct:.1f}%)<br/>
                <b>Status:</b> <font color="{status_color}">{status_text}</font>
                """
                story.append(Paragraph(essential_summary, self.body_style))
                story.append(Spacer(1, 15))
        
        # Cost Cutting Opportunities with Action Focus
        if 'cost_cutting_opportunities' in report_data:
            story.append(Paragraph("💡 Savings Opportunities", self.heading_style))
            opportunities = report_data['cost_cutting_opportunities']
            
            total_savings = sum(opp.get('potential_savings', 0) for opp in opportunities)
            story.append(Paragraph(f"<b>Total Potential Monthly Savings: R {total_savings:,.2f}</b>", self.highlight_style))
            story.append(Spacer(1, 10))
            
            for i, opp in enumerate(opportunities, 1):
                priority_color = colors.red if opp.get('priority') == 'High' else SISONOVA_ACCENT if opp.get('priority') == 'Medium' else SISONOVA_GREEN
                
                opp_text = f"""
                <b>{i}. {opp.get('category', 'Unknown Category')}</b> 
                <font color="{priority_color}">({opp.get('priority', 'Medium')} Priority)</font><br/>
                💰 <b>Potential Savings:</b> R {opp.get('potential_savings', 0):,.2f}/month<br/>
                📋 <b>Action:</b> {opp.get('recommendation', 'No recommendation')}<br/>
                """
                story.append(Paragraph(opp_text, self.body_style))
                story.append(Spacer(1, 10))
        
        # Spending Patterns Analysis
        if 'spending_patterns' in report_data:
            story.append(Paragraph("📈 Spending Patterns", self.heading_style))
            patterns = report_data['spending_patterns']
            
            pattern_text = f"""
            <b>Peak Spending Day:</b> {patterns.get('peak_spending_day', 'Unknown')}<br/>
            <b>Spending Frequency:</b> {patterns.get('spending_frequency', 0):.1f} transactions per day<br/>
            """
            
            # Month part analysis
            month_parts = patterns.get('month_part_spending', {})
            if month_parts:
                pattern_text += f"""
                <b>Monthly Pattern:</b><br/>
                • Beginning of month: R {month_parts.get('Beginning', 0):,.0f}<br/>
                • Middle of month: R {month_parts.get('Middle', 0):,.0f}<br/>
                • End of month: R {month_parts.get('End', 0):,.0f}<br/>
                """
            
            story.append(Paragraph(pattern_text, self.body_style))
            story.append(Spacer(1, 15))
        
        # Actionable Recommendations
        if 'recommendations' in report_data:
            story.append(Paragraph("🎯 Your Action Plan", self.heading_style))
            for i, rec in enumerate(report_data['recommendations'], 1):
                story.append(Paragraph(f"{i}. {rec}", self.body_style))
            story.append(Spacer(1, 20))
        
        return story
    
    def _create_summary_box(self, summary: Dict[str, Any], report_type: str) -> Table:
        """Create an attractive summary box"""
        if report_type == 'expense':
            total = summary.get('total_expenses', 0)
            daily = summary.get('average_daily_spending', 0)
            status = self._get_spending_status(total)
        elif report_type == 'income':
            total = summary.get('total_income', 0)
            daily = summary.get('monthly_average', 0)
            status = self._get_income_status(total)
        else:
            total = 0
            daily = 0
            status = "Unknown"
        
        summary_data = [
            [f'Total: R {total:,.2f}', f'Daily Avg: R {daily:,.2f}', f'Status: {status}']
        ]
        
        summary_table = Table(summary_data, colWidths=[50*mm, 50*mm, 50*mm])
        summary_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, -1), SISONOVA_LIGHT_BLUE),
            ('TEXTCOLOR', (0, 0), (-1, -1), SISONOVA_BLUE),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, -1), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, -1), 12),
            ('PADDING', (0, 0), (-1, -1), 12),
            ('GRID', (0, 0), (-1, -1), 1, SISONOVA_BLUE)
        ]))
        
        return summary_table
    
    def _get_modern_table_style(self) -> TableStyle:
        """Modern, clean table styling"""
        return TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), SISONOVA_BLUE),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 10),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('TOPPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.white),
            ('TEXTCOLOR', (0, 1), (-1, -1), SISONOVA_DARK_GRAY),
            ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 1), (-1, -1), 9),
            ('PADDING', (0, 1), (-1, -1), 8),
            ('GRID', (0, 0), (-1, -1), 0.5, SISONOVA_GRAY),
            ('ROWBACKGROUNDS', (0, 1), (-1, -1), [colors.white, SISONOVA_LIGHT_BLUE])
        ])
    
    def _get_category_table_style(self) -> TableStyle:
        """Category-specific table styling with color coding"""
        return TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), SISONOVA_GREEN),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('ALIGN', (1, 0), (-1, -1), 'RIGHT'),  # Right align numbers
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 10),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('TOPPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.white),
            ('TEXTCOLOR', (0, 1), (-1, -1), SISONOVA_DARK_GRAY),
            ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 1), (-1, -1), 9),
            ('PADDING', (0, 1), (-1, -1), 8),
            ('GRID', (0, 0), (-1, -1), 0.5, SISONOVA_GRAY),
            ('ROWBACKGROUNDS', (0, 1), (-1, -1), [colors.white, SISONOVA_LIGHT_GREEN])
        ])
    
    def _get_expense_insight(self, amount: float) -> str:
        if amount > 50000:
            return "High spending period"
        elif amount > 20000:
            return "Moderate spending"
        else:
            return "Conservative spending"
    
    def _get_daily_insight(self, amount: float) -> str:
        if amount > 300:
            return "Above average daily spend"
        elif amount > 150:
            return "Moderate daily spend"
        else:
            return "Conservative daily spend"
    
    def _get_transaction_insight(self, amount: float) -> str:
        if amount > 500:
            return "Large transactions"
        elif amount > 100:
            return "Medium transactions"
        else:
            return "Small transactions"
    
    def _get_spending_status(self, amount: float) -> str:
        if amount > 50000:
            return "High Spender"
        elif amount > 20000:
            return "Moderate Spender"
        else:
            return "Conservative Spender"
    
    def _get_income_status(self, amount: float) -> str:
        if amount > 50000:
            return "High Earner"
        elif amount > 20000:
            return "Moderate Earner"
        else:
            return "Building Income"
    
    def _build_income_pdf_content(self, report_data: Dict[str, Any]) -> list:
        """Build PDF content for income reports"""
        story = []
        
        # Summary Section
        if 'summary' in report_data:
            story.append(Paragraph("Income Summary", self.heading_style))
            summary = report_data['summary']
            
            summary_data = [
                ['Total Income:', f"R {summary.get('total_income', 0):,.2f}"],
                ['Monthly Average:', f"R {summary.get('monthly_average', 0):,.2f}"],
                ['Income Events:', str(summary.get('total_income_events', 0))],
                ['Average per Event:', f"R {summary.get('average_income_per_event', 0):,.2f}"]
            ]
            
            if 'largest_income' in summary:
                largest = summary['largest_income']
                summary_data.append(['Largest Income:', f"R {largest.get('amount', 0):,.2f} - {largest.get('type', 'Unknown')}"])
            
            summary_table = Table(summary_data, colWidths=[2.5*inch, 2.5*inch])
            summary_table.setStyle(self._get_table_style())
            story.append(summary_table)
            story.append(Spacer(1, 20))
        
        # Source Analysis
        if 'source_analysis' in report_data:
            story.append(Paragraph("Income Sources", self.heading_style))
            sources = report_data['source_analysis'].get('source_breakdown', {})
            
            source_data = [['Source', 'Amount', 'Count', 'Percentage']]
            for source, data in sources.items():
                source_data.append([
                    source,
                    f"R {data.get('total', 0):,.2f}",
                    str(data.get('count', 0)),
                    f"{data.get('percentage', 0)}%"
                ])
            
            source_table = Table(source_data, colWidths=[2*inch, 1.2*inch, 0.8*inch, 1*inch])
            source_table.setStyle(self._get_table_style())
            story.append(source_table)
            story.append(Spacer(1, 20))
        
        # Stability Analysis
        if 'stability_analysis' in report_data:
            story.append(Paragraph("Income Stability", self.heading_style))
            stability = report_data['stability_analysis']
            
            stability_data = [
                ['Stability Score:', f"{stability.get('stability_score', 0)}/100"],
                ['Regular Income %:', f"{stability.get('income_predictability', {}).get('regular_percentage', 0)}%"]
            ]
            
            stability_table = Table(stability_data, colWidths=[2.5*inch, 2*inch])
            stability_table.setStyle(self._get_table_style())
            story.append(stability_table)
            story.append(Spacer(1, 20))
        
        # Growth Opportunities
        if 'growth_opportunities' in report_data:
            story.append(Paragraph("Growth Opportunities", self.heading_style))
            opportunities = report_data['growth_opportunities']
            
            for opp in opportunities:
                story.append(Paragraph(f"<b>{opp.get('type', 'Unknown')}</b>", self.styles['Normal']))
                story.append(Paragraph(f"Description: {opp.get('description', 'No description')}", self.styles['Normal']))
                story.append(Paragraph(f"Potential Increase: {opp.get('potential_monthly_increase', 'Unknown')}", self.styles['Normal']))
                story.append(Paragraph(f"Action Required: {opp.get('action_required', 'No action specified')}", self.styles['Normal']))
                story.append(Spacer(1, 10))
        
        # Recommendations
        if 'recommendations' in report_data:
            story.append(Paragraph("Recommendations", self.heading_style))
            for rec in report_data['recommendations']:
                story.append(Paragraph(f"• {rec}", self.styles['Normal']))
            story.append(Spacer(1, 20))
        
        return story
    
    def _build_feelings_pdf_content(self, report_data: Dict[str, Any]) -> list:
        """Build PDF content for feelings reports"""
        story = []
        
        # Summary Section
        if 'summary' in report_data:
            story.append(Paragraph("Financial Wellness Summary", self.heading_style))
            summary = report_data['summary']
            
            summary_data = [
                ['Total Entries:', str(summary.get('total_feeling_entries', 0))],
                ['Most Common Feeling:', summary.get('most_common_feeling', 'Unknown')],
                ['Stress Level:', f"{summary.get('stress_level_percentage', 0)}%"],
                ['Wellness Status:', summary.get('wellness_status', 'Unknown')]
            ]
            
            summary_table = Table(summary_data, colWidths=[2.5*inch, 2.5*inch])
            summary_table.setStyle(self._get_table_style())
            story.append(summary_table)
            story.append(Spacer(1, 20))
            
            # Feeling Distribution
            if 'feeling_distribution' in summary:
                story.append(Paragraph("Feeling Distribution", self.subheading_style))
                feelings = summary['feeling_distribution']
                feeling_data = [['Feeling', 'Count']]
                for feeling, count in feelings.items():
                    feeling_data.append([feeling, str(count)])
                
                feeling_table = Table(feeling_data, colWidths=[2.5*inch, 1.5*inch])
                feeling_table.setStyle(self._get_table_style())
                story.append(feeling_table)
                story.append(Spacer(1, 20))
        
        # Stress Analysis
        if 'stress_analysis' in report_data:
            story.append(Paragraph("Stress Analysis", self.heading_style))
            stress = report_data['stress_analysis']
            
            stress_data = [
                ['Stress Trend:', stress.get('stress_trend_direction', 'Unknown')],
                ['High Stress Periods:', str(len(stress.get('high_stress_periods', [])))],
                ['Low Stress Periods:', str(len(stress.get('low_stress_periods', [])))]
            ]
            
            stress_table = Table(stress_data, colWidths=[2.5*inch, 2*inch])
            stress_table.setStyle(self._get_table_style())
            story.append(stress_table)
            story.append(Spacer(1, 20))
        
        # Mental Health Insights
        if 'mental_health_insights' in report_data:
            story.append(Paragraph("Mental Health Assessment", self.heading_style))
            mental_health = report_data['mental_health_insights']
            
            story.append(Paragraph(f"Risk Level: {mental_health.get('mental_health_risk_level', 'Unknown')}", self.styles['Normal']))
            story.append(Paragraph(f"Positive Feelings: {mental_health.get('positive_feelings_percentage', 0)}%", self.styles['Normal']))
            
            if mental_health.get('support_resources'):
                story.append(Paragraph("Support Resources:", self.styles['Normal']))
                for resource in mental_health['support_resources']:
                    story.append(Paragraph(f"• {resource}", self.styles['Normal']))
            
            story.append(Spacer(1, 20))
        
        # Support Recommendations
        if 'support_recommendations' in report_data:
            story.append(Paragraph("Wellness Recommendations", self.heading_style))
            for rec in report_data['support_recommendations']:
                story.append(Paragraph(f"• {rec}", self.styles['Normal']))
            story.append(Spacer(1, 20))
        
        return story
    
    def _build_comprehensive_pdf_content(self, report_data: Dict[str, Any]) -> list:
        """Build PDF content for comprehensive reports (fallback)"""
        # This is the same as the original generate_financial_report_pdf content
        # but returned as a list for consistency
        story = []
        
        # Summary Section
        if 'summary' in report_data:
            story.append(Paragraph("Financial Summary", self.heading_style))
            summary = report_data['summary']
            summary_data = [
                ['Total Income:', f"R {summary.get('total_income', 0):,.2f}"],
                ['Total Expenses:', f"R {summary.get('total_expenses', 0):,.2f}"],
                ['Net Position:', f"R {summary.get('net_position', 0):,.2f}"],
                ['Savings Rate:', f"{summary.get('savings_rate', 0)}%"],
                ['Daily Spending:', f"R {summary.get('average_daily_spending', 0):,.2f}"],
                ['Status:', summary.get('financial_status', 'Unknown')]
            ]
            
            summary_table = Table(summary_data, colWidths=[2*inch, 2*inch])
            summary_table.setStyle(self._get_table_style())
            story.append(summary_table)
            story.append(Spacer(1, 20))
        
        # Add other sections as needed...
        return story
    
    def _get_table_style(self) -> TableStyle:
        """Get consistent table styling"""
        return TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.lightgrey),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 10),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ])